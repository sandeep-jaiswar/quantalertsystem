name: Documentation & Release Management

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - '*.md'
      - 'quantalertsystem/**/*.py'

env:
  PYTHONPATH: ${{ github.workspace }}

jobs:
  documentation-build:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints myst-parser
        pip install pydoc-markdown mkdocs mkdocs-material

    - name: Generate API documentation
      run: |
        mkdir -p docs/api
        # Generate API docs with Sphinx
        sphinx-apidoc -o docs/api quantalertsystem
        
        # Generate strategy documentation
        python scripts/generate_strategy_docs.py --output docs/strategies/

    - name: Build Sphinx documentation
      run: |
        cd docs
        make html
        cd ..

    - name: Build MkDocs documentation
      run: |
        mkdocs build --site-dir site

    - name: Generate comprehensive README
      run: |
        python scripts/generate_comprehensive_readme.py \
          --input . \
          --output README_GENERATED.md

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation-${{ github.run_number }}
        path: |
          docs/_build/html/
          site/
          README_GENERATED.md
        retention-days: 30

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        cname: quantalertsystem.docs

  documentation-quality:
    name: Documentation Quality Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install quality check tools
      run: |
        pip install -r requirements.txt
        pip install -e .
        pip install doc8 pydocstyle interrogate

    - name: Check documentation style
      run: |
        # Check reStructuredText style
        doc8 docs/ --max-line-length 88
        
        # Check docstring style
        pydocstyle quantalertsystem/ --count --explain

    - name: Check docstring coverage
      run: |
        interrogate quantalertsystem/ \
          --verbose \
          --fail-under=80 \
          --ignore-init-method \
          --ignore-magic \
          --ignore-private \
          --generate-badge docs/badges/

    - name: Lint markdown files
      uses: DavidAnson/markdownlint-cli2-action@v9
      with:
        globs: '**/*.md'

    - name: Check external links
      run: |
        pip install requests beautifulsoup4
        python scripts/check_external_links.py docs/ README.md

  changelog-generation:
    name: Generate Changelog
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install changelog tools
      run: |
        pip install gitpython

    - name: Generate changelog
      run: |
        python scripts/generate_changelog.py \
          --since-tag $(git describe --tags --abbrev=0 2>/dev/null || echo "initial") \
          --output CHANGELOG_GENERATED.md

    - name: Create changelog PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'docs: update changelog'
        title: '📝 Update Changelog'
        body: |
          ## 📝 Changelog Updates
          
          This PR updates the changelog with recent changes.
          
          ### Changes
          - Added new features and improvements
          - Listed bug fixes and security updates
          - Updated version information
          
          **Auto-generated by documentation workflow**
        branch: docs/update-changelog
        delete-branch: true
        labels: |
          documentation
          changelog

  release-management:
    name: Release Management
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install release tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install build twine

    - name: Extract version from tag
      id: get_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build package
      run: |
        python -m build

    - name: Generate release notes
      run: |
        python scripts/generate_release_notes.py \
          --version ${{ steps.get_version.outputs.VERSION }} \
          --output release-notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        files: |
          dist/*
          docs/_build/html/**
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'rc') }}

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine check dist/*
        twine upload dist/*

  code-examples:
    name: Validate Code Examples
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Extract and test code examples from docs
      run: |
        python scripts/test_documentation_examples.py \
          --docs-dir docs/ \
          --readme README.md \
          --output examples-test-results.json

    - name: Generate example notebooks
      run: |
        python scripts/generate_example_notebooks.py \
          --output docs/examples/

    - name: Test example notebooks
      run: |
        pip install jupyter nbconvert
        jupyter nbconvert --to notebook --execute docs/examples/*.ipynb

    - name: Upload example artifacts
      uses: actions/upload-artifact@v3
      with:
        name: code-examples-${{ github.run_number }}
        path: |
          docs/examples/
          examples-test-results.json
        retention-days: 30

  api-documentation:
    name: API Documentation Generation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install API doc tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pdoc3 sphinx-autoapi

    - name: Generate API documentation
      run: |
        # Generate HTML API docs
        pdoc --html --output-dir docs/api quantalertsystem
        
        # Generate OpenAPI spec if applicable
        python scripts/generate_api_spec.py --output docs/api/openapi.json

    - name: Generate configuration documentation
      run: |
        python scripts/document_configuration.py \
          --output docs/configuration.md

    - name: Generate strategy documentation
      run: |
        python scripts/document_strategies.py \
          --output docs/strategies/

    - name: Upload API documentation
      uses: actions/upload-artifact@v3
      with:
        name: api-documentation-${{ github.run_number }}
        path: docs/api/
        retention-days: 30

  documentation-deployment:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [documentation-build, documentation-quality]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download documentation artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation-${{ github.run_number }}

    - name: Setup Node.js for deployment
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Deploy to documentation hosting
      run: |
        # Deploy to GitHub Pages or other hosting service
        echo "Deploying documentation to hosting service..."
        
    - name: Update documentation index
      run: |
        python scripts/update_documentation_index.py \
          --version ${{ github.sha }} \
          --output docs-index.json