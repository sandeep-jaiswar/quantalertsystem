name: Dependency Management & Security

on:
  schedule:
    # Check dependencies daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
  push:
    paths:
      - 'requirements.txt'
      - 'setup.py'
      - 'pyproject.toml'

jobs:
  dependency-audit:
    name: Security Audit & Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-audit and safety
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit safety

    - name: Run pip-audit (OSV Database)
      run: |
        pip-audit --desc --format=json --output=pip-audit-report.json
        pip-audit --desc

    - name: Run Safety (PyUp Database)
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Check for known security issues
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-security.json --skip B101,B601
        bandit -r . --skip B101,B601

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          pip-audit-report.json
          safety-report.json
          bandit-security.json
        retention-days: 90

  dependency-updates:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-check-updates equivalent
      run: |
        python -m pip install --upgrade pip
        pip install pip-review outdated

    - name: Check for outdated packages
      run: |
        pip install -r requirements.txt
        pip list --outdated --format=json > outdated-packages.json
        pip list --outdated

    - name: Check license compatibility
      run: |
        pip install pip-licenses
        pip-licenses --format=json --output-file=license-report.json
        pip-licenses --format=table

    - name: Generate dependency tree
      run: |
        pip install pipdeptree
        pipdeptree --json > dependency-tree.json
        pipdeptree

    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports-${{ github.run_number }}
        path: |
          outdated-packages.json
          license-report.json
          dependency-tree.json
        retention-days: 30

  automated-dependency-update:
    name: Automated Security Updates
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit safety

    - name: Check for critical vulnerabilities
      id: vuln-check
      run: |
        # Check if there are critical vulnerabilities that need immediate fixing
        if pip-audit --format=json | jq -e '.vulnerabilities[] | select(.fix_versions != null)' > /dev/null; then
          echo "critical_vulns=true" >> $GITHUB_OUTPUT
        else
          echo "critical_vulns=false" >> $GITHUB_OUTPUT
        fi

    - name: Create security update PR
      if: steps.vuln-check.outputs.critical_vulns == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'security: fix critical dependency vulnerabilities'
        title: 'ðŸ”’ Security: Critical Dependency Updates'
        body: |
          ## ðŸ”’ Critical Security Updates
          
          This PR contains automated fixes for critical security vulnerabilities detected in dependencies.
          
          ### Changes
          - Updated packages with known security vulnerabilities
          - Maintained compatibility with existing codebase
          
          ### Verification
          - [ ] All tests pass
          - [ ] Security scan shows no critical vulnerabilities
          - [ ] Application functionality verified
          
          **Auto-generated by dependency security workflow**
        branch: security/critical-dependency-updates
        delete-branch: true
        labels: |
          security
          dependencies
          auto-fix

  package-validation:
    name: Package Build & Distribution Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest

    - name: Check package manifest
      run: |
        check-manifest

    - name: Build package
      run: |
        python -m build

    - name: Check package integrity
      run: |
        twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import quantalertsystem; print('Package import successful')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-${{ github.run_number }}
        path: dist/
        retention-days: 30

  requirements-lock:
    name: Generate Lock Files
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools

    - name: Generate requirements lock file
      run: |
        pip-compile requirements.txt --output-file requirements.lock
        pip-compile --extra dev setup.py --output-file requirements-dev.lock

    - name: Upload lock files
      uses: actions/upload-artifact@v3
      with:
        name: requirements-lock-${{ github.run_number }}
        path: |
          requirements.lock
          requirements-dev.lock
        retention-days: 30

    - name: Create lock file PR
      if: github.ref == 'refs/heads/main'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'deps: update requirements lock files'
        title: 'ðŸ“¦ Update Requirements Lock Files'
        body: |
          ## ðŸ“¦ Requirements Lock File Updates
          
          This PR updates the locked dependency versions for reproducible builds.
          
          ### Changes
          - Updated `requirements.lock` with current dependency versions
          - Updated `requirements-dev.lock` with development dependencies
          
          ### Benefits
          - Ensures reproducible builds across environments
          - Locks dependency versions for stability
          - Enables easier security auditing
          
          **Auto-generated by dependency management workflow**
        branch: deps/update-lock-files
        delete-branch: true
        labels: |
          dependencies
          automation