[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "quantalertsystem"
version = "1.0.0"
description = "Investment bank-quality quantitative alerting platform with zero-cost infrastructure"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Sandeep Jaiswar", email = "sandeep.jaiswar@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
keywords = ["quantitative", "finance", "trading", "alerts", "investment", "analysis"]

dependencies = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "duckdb>=0.9.0",
    "pyarrow>=13.0.0",
    "yfinance>=0.2.18",
    "python-telegram-bot>=20.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "schedule>=1.2.0",
    "requests>=2.31.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=3.0.0",
]
quality = [
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]
performance = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/sandeep-jaiswar/quantalertsystem"
Repository = "https://github.com/sandeep-jaiswar/quantalertsystem.git"
Documentation = "https://quantalertsystem.readthedocs.io"
"Bug Tracker" = "https://github.com/sandeep-jaiswar/quantalertsystem/issues"

[project.scripts]
quant-alerts = "quantalertsystem.main:main"
quant-health-check = "quantalertsystem.scripts.health_check:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["quantalertsystem*", "config*", "models*", "services*", "scripts*"]
exclude = ["tests*"]

[tool.ruff]
# Comprehensive ruff configuration for investment bank quality code
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # mccabe
    "C90",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-annotations
    "ANN",
    # flake8-async
    "ASYNC",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-boolean-trap
    "FBT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-datetime
    "DTZ",
    # flake8-debugger
    "T10",
    # flake8-errmsg
    "EM",
    # flake8-executable
    "EXE",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-import-conventions
    "ICN",
    # flake8-logging-format
    "G",
    # flake8-no-pep420
    "INP",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-return
    "RET",
    # flake8-simplify
    "SIM",
    # flake8-tidy-imports
    "TID",
    # flake8-type-checking
    "TCH",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # Pylint
    "PL",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # NumPy-specific rules
    "NPY",
    # Airflow
    "AIR",
    # Perflint
    "PERF",
    # Refurb
    "FURB",
    # flake8-logging
    "LOG",
    # Ruff-specific rules
    "RUF",
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow print statements in scripts
    "T201",
    # Allow `assert` statements
    "S101",
    # Allow relative imports
    "TID252",
]

unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["PLR2004", "S101", "TID252", "ANN"]
"scripts/**/*" = ["T201", "PLR2004"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = ["quantalertsystem", "config", "models", "services"]
force-single-line = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.black]
# Black code formatting configuration
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

[tool.mypy]
# MyPy type checking configuration
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "yfinance.*",
    "telegram.*",
    "duckdb.*",
    "pyarrow.*",
    "schedule.*",
    "psutil.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Pytest configuration
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=quantalertsystem",
    "--cov=config",
    "--cov=models", 
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
    "network: marks tests that require network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
# Coverage configuration
source = ["quantalertsystem", "config", "models", "services"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
# Security linting configuration
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]